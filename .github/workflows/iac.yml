name: 'iac'

on:
  workflow_call:
    inputs:
      command:
        type: string
        required: true
      environment: 
        type: string
        required: true
    outputs:
      deployment_token: 
        value: ${{ jobs.deploy.outputs.deployment_token }}
  workflow_dispatch:
    inputs:
      command:
        type: choice
        options:
        - apply
        - destroy
        required: true
      environment: 
        type: string
        required: true  
  
permissions:
  contents: read

env:
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

jobs:
  deploy:
    name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }} 
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    outputs:
      deployment_token: ${{ steps.terraform-output.outputs.deployment_token }} 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      with:
        terraform_wrapper: false
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" -backend-config="container_name=$CONTAINER_NAME" -backend-config="key=$KEY" -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
      working-directory: iac
      env:
        STORAGE_ACCOUNT_NAME: ${{ vars.STORAGE_ACCOUNT_NAME }}
        CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
        KEY: ${{ vars.KEY }}
        RESOURCE_GROUP_NAME: ${{ vars.RESOURCE_GROUP_NAME }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      working-directory: iac 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: ${{ inputs.command == 'apply' }}
      run: terraform plan -input=false -var="env=$ENVIRONMENT" -var="location=westeurope" -var="ip_address=90.225.251.129"
      working-directory: iac
      env:
        ENVIRONMENT: ${{ inputs.environment }}

    - name: Terraform Plan Destroy
      if: ${{ inputs.command == 'destroy' }}
      run: terraform plan -destroy -input=false -var="env=$ENVIRONMENT" -var="location=westeurope" -var="ip_address=90.225.251.129"
      working-directory: iac
      env:
        ENVIRONMENT: ${{ inputs.environment }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: ${{ inputs.command == 'apply' }}
      run: terraform apply -auto-approve -input=false -var="env=$ENVIRONMENT" -var="location=westeurope" -var="ip_address=90.225.251.129"
      working-directory: iac
      env:
        ENVIRONMENT: ${{ inputs.environment }}

    - name: Terraform Destroy
      if: ${{ inputs.command == 'destroy' }}
      run: terraform destroy -auto-approve -input=false -var="env=$ENVIRONMENT" -var="location=westeurope" -var="ip_address=90.225.251.129"
      working-directory: iac
      env:
        ENVIRONMENT: ${{ inputs.environment }}

    - name: Terraform Output
      if: ${{ inputs.command == 'apply' }}
      id: terraform-output
      run: |
        echo DB_PASSWORD=$(terraform output db-admin-password) >> "$GITHUB_OUTPUT"
        echo deployment_token=$(terraform output swa-deployment-token | sed 's/\"//g') >> "$GITHUB_OUTPUT"

        echo "$GITHUB_OUTPUT"
      working-directory: iac 

    - name: SQL - Add external identity
      if: ${{ inputs.command == 'apply' }}
      uses: Azure/sql-action@v2.2.1
      with:
        # The connection string, including authentication information, for the Azure SQL Server database.
        connection-string: ${{ format('Server=tcp:sql-toggleon-{0}.database.windows.net,1433;Initial Catalog=sqldb-toggleon-dev;Persist Security Info=False;User ID=dbadmin;Password={1};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', env.ENVIRONMENT, env.PASSWORD) }}
        # Path to the file used for this action. Supported file types are .sql, .dacpac, or .sqlproj.
        path: src/ToggleOn.EntityFrameworkCore.SqlServer/Migrations/ExternalIdentity.sql
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        PASSWORD: ${{ steps.terraform-output.outputs.DB_PASSWORD }}

    - name: SQL - Add migrations
      if: ${{ inputs.command == 'apply' }}
      uses: Azure/sql-action@v2.2.1
      with:
        # The connection string, including authentication information, for the Azure SQL Server database.
        connection-string: ${{ format('Server=tcp:sql-toggleon-{0}.database.windows.net,1433;Initial Catalog=sqldb-toggleon-dev;Persist Security Info=False;User ID=dbadmin;Password={1};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;', env.ENVIRONMENT, env.PASSWORD) }}        
        # Path to the file used for this action. Supported file types are .sql, .dacpac, or .sqlproj.
        path: src/ToggleOn.EntityFrameworkCore.SqlServer/Migrations/MigrationScript.sql
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        PASSWORD: ${{ steps.terraform-output.outputs.DB_PASSWORD }}
          

